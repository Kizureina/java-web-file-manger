//1.回文#include<stdio.h>#include<string.h>int main() {	int i = 0;	char str[100] = { 0 };	gets(str);	for (i = 0; i < strlen(str) / 2; i++) {		if (str[i] == str[strlen(str) - 1 - i]) {			continue;		}		else {			printf("非回文");			return 0;		}	}	printf("是回文！");	return 0;}//2.约瑟夫环#include<stdio.h>#include<stdlib.h>typedef struct node{	int data;	struct node* next;}person;person* initLinkedList(int num){	int i;	person* head = (person*)malloc(sizeof(person));	head->data = 1;	head->next = NULL;	person* circle = head;	for (i = 2; i <= num; i++)	{ 		person* p = (person*)malloc(sizeof(person));		p->data = i;		p->next = NULL;		circle->next = p;		circle = circle->next;	}	circle->next = head;	// 构造循环	return head;}int main(){	int n,m,i;	person* tail;	// 需要删除节点的前一个节点，方便删除	person* head;	person* p;	printf("请输入总人数：");	scanf("%d",&n);	head = initLinkedList(n);	printf("请输入出列人的编号:");	scanf("%d",&m);		p = head;	while(p->next != p)	//当p指向p自身时，链表内只剩一个节点，游戏结束	{		for(i = 1; i < m; i++)		{			tail = p;			p = p->next;			}		tail->next = p->next;		free(p);		p = tail->next;	}	printf("最后的胜利者为%d",p->data);	free(p);	return 0;}//2.1#include<stdio.h>#include<string.h>int findTheWinner(int n, int k) {    int pos = 0;    for (int i = 2; i < n + 1; ++i) {        pos = (pos + k) % i;    }    return pos + 1;}int main(){	printf("%d", findTheWinner(10, 3));	return 0;}